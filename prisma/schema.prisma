// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int      @default(0) @map("in_stock")
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // Relations
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String         @map("category_id")
  productImages ProductImage[]
  orderItem     OrderItem[]

  @@index([gender])
  @@map("products")
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("product_images")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          Role      @default(user)
  image         String?

  // Relations
  address UserAddress?
  orders  Order[]

  @@map("users")
}

model UserAddress {
  id          String  @id @default(uuid())
  names       String
  lastname    String
  address     String
  address2    String?
  postalCode  String
  city        String
  phoneNumber String  @map("phone_number")

  // Relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @map("country_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique @map("user_id")

  @@map("user_addresses")
}

model Country {
  id   String @id
  name String @unique

  // Relations
  addresses      UserAddress[]
  orderAddresses OrderAddress[]

  @@map("countries")
}

// User 1:M Orders 1:M Items
// Order 1:1 Address
model Order {
  id         String    @id @default(uuid())
  countItems Int       @map("count_items")
  subtotal   Float
  tax        Float
  total      Float
  isPaid     Boolean   @map("is_paid")
  paidAt     DateTime? @map("paid_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  items        OrderItem[]
  orderAddress OrderAddress?

  // Paid
  transactionId String? @map("transaction_id")

  @@map("orders")
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @map("order_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("order_items")
}

model OrderAddress {
  id          String  @id @default(uuid())
  names       String
  lastName    String  @map("lastname")
  address     String
  address2    String?
  postalCode  String  @map("postal_code")
  city        String
  phoneNumber String  @map("phone_number")

  // Relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @map("country_id")
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @unique @map("order_id")

  @@map("order_addresses")
}
